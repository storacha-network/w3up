import type { Generated, Text, Row, Table } from './database.js'
import type { DID, Link, Result, Failure } from '@ucanto/interface'
export * from './database.js'

export interface Consumer {
  /**
   * Provider that provides service to the customer.
   */
  provider: DID<'web'>

  /**
   * Identifier generated by the provider to identify this subscription.
   */
  order: Text<Link>

  /**
   * DID of the consumer of the consumer space.
   */
  consumer: DID<'key'>
}

export interface ConsumerID {
  /**
   * CID of the invocation that created this subscription
   */
  cause: Text<Link>
}

export interface ConsumerAdd extends Consumer, ConsumerID {}

export interface ConsumerRemove extends Consumer {}

export interface ConsumerRecord extends ConsumerAdd, Row {
  /**
   * Unique identifier for this subscription.
   */
  subscription: Generated<string>
}

export type ConsumerTable = Table<ConsumerRecord>

export interface ConsumerStore {
  add: (consumer: ConsumerAdd) => Promise<Result<ConsumerID, Failure>>
  remove: (
    consumer: ConsumerRemove
  ) => Promise<Result<{ cause?: Link }, Failure>>

  find: (query: ConsumerQuery) => Promise<ConsumerRecord[]>
}

export interface ConsumerQuery {
  provider?: DID<'web'>
  customer?: DID<'mailto'>
  consumer?: DID<'key'>

  order?: Link
}
