import type { ColumnType, Generated } from 'kysely'
import type { DID, Link, Result, Failure } from '@ucanto/interface'

export interface Row {
  inserted_at: ColumnType<Date, never, Date>
  updated_at: ColumnType<Date, never, Date>
}

export interface Consumer {
  /**
   * CID of the invocation that created this subscription
   */
  cause: Link

  /**
   * Account that is billed for the subscription.
   */
  customer: DID<'mailto'>

  /**
   * Provider that provides service to the customer.
   */
  provider: DID<'web'>

  /**
   * Identifier generated by the provider to identify this subscription.
   */
  order: string

  /**
   * DID of the consumer of the consumer space.
   */
  consumer: DID<'key'>
}

export interface ConsumerRecord extends Omit<Consumer, 'cause'>, Row {
  cause: ColumnType<Link, string, Link>
  /**
   * Unique identifier for this subscription.
   */
  subscription: Generated<string>
}

export interface ConsumerStore {
  // eslint-disable-next-line @typescript-eslint/ban-types
  add: (consumer: Consumer) => Promise<Result<{}, Failure>>

  find: (query: Query) => Promise<Consumer[]>
}

export interface Query {
  provider?: DID<'web'>
  customer?: DID<'mailto'>
  consumer?: DID<'key'>

  order?: string
}
